export interface AnyAction extends Action {
    [extraProps: string]: any;
}
export interface Action<T = any> {
    type: T;
}
export declare type Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;
export interface Storage {
    getItem(key: string, ...args: Array<any>): any;
    setItem(key: string, value: any, ...args: Array<any>): any;
    removeItem(key: string, ...args: Array<any>): any;
}
export interface PersistState {
    version: number;
    rehydrated: boolean;
}
export declare type PersistedState = {
    _persist: PersistState;
} | undefined;
export declare type PersistMigrate = (state: PersistedState, currentVersion: number) => Promise<PersistedState>;
export declare type TransformInbound<SS, ESS, S = any> = (subState: SS, key: keyof S, state: S) => ESS;
export declare type TransformOutbound<SS, HSS, RS = any> = (state: SS, key: keyof RS, rawState: RS) => HSS;
export interface Transform<HSS, ESS, S = any, RS = any> {
    in: TransformInbound<HSS, ESS, S>;
    out: TransformOutbound<ESS, HSS, RS>;
    deepPersistKey?: string;
}
export declare type Transforms<HSS, ESS, S, RS> = Array<Transform<HSS, ESS, S, RS>>;
export interface PersistConfig<S, RS = any, HSS = any, ESS = any> {
    version?: number;
    storage: Storage;
    key: string;
    keyPrefix?: string;
    blacklist?: Array<string>;
    whitelist?: Array<string>;
    transforms?: Array<Transform<HSS, ESS, S, RS>>;
    throttle?: number;
    migrate?: PersistMigrate;
    stateReconciler?: false | StateReconciler<S>;
    getStoredState?: (config: PersistConfig<S, RS, HSS, ESS>) => Promise<PersistedState>;
    debug?: boolean;
    serialize?: boolean;
    timeout?: number;
    writeFailHandler?: (err: Error) => void;
}
export declare type StateReconciler<S> = (inboundState: any, state: S, reducedState: S, config: PersistConfig<S>) => S;
export declare type TObject = Record<any, any>;
export declare type RootKeysGroup = {
    [key: string]: string[] | undefined;
};
export declare enum ConfigType {
    WHITELIST = 0,
    BLACKLIST = 1
}
export interface GetPersistConfigArgs<S> extends Omit<PersistConfig<S>, 'stateReconciler'> {
    rootReducer: Reducer<S>;
}
//# sourceMappingURL=types.d.ts.map