import { TObject, ConfigType, RootKeysGroup } from '../types';
export declare const isObjectLike: (value: any) => boolean;
export declare const isLength: (value: any) => boolean;
export declare const isArray: (arg: any) => arg is any[];
export declare const isPlainObject: (item: any) => boolean;
export declare const isIntegerString: (x: any) => boolean;
export declare const isString: (x: any) => boolean;
export declare const isDate: (x: any) => boolean;
export declare const isEmpty: (obj: TObject) => boolean;
export declare const getCircularPath: (obj: TObject, path?: string | undefined, seen?: Set<any> | undefined) => string | null;
export declare const _cloneDeep: (obj: TObject) => TObject;
export declare const cloneDeep: (obj: TObject) => TObject;
export declare const difference: (base: any, newValue: any) => TObject;
export declare const path: (obj: TObject, pathArray: string[]) => TObject;
export declare const assocPath: (path: string[], value: any) => TObject;
export declare const dissocPath: (obj: TObject, pathArray: string[]) => TObject;
export declare const mergeDeep: (target: TObject, source: TObject, options?: {
    preservePlaceholder?: boolean | undefined;
    preserveUndefined?: boolean | undefined;
} | undefined) => TObject;
export declare const preserveUndefined: (outboundState: TObject, pathsArray: string[] | undefined, type: ConfigType, preserveAsPlaceholder?: boolean | undefined) => TObject;
export declare const unique: (value: string, index: number, self: string[]) => boolean;
export declare const findDuplicatesAndSubsets: (list: string[]) => {
    duplicates: string[];
    subsets: string[];
};
export declare const singleTransformValidator: (config: string[] | undefined, name: string, type: ConfigType) => void;
export declare const transformsValidator: (transforms?: {
    deepPersistKey?: string | undefined;
}[] | undefined) => void;
export declare const configValidator: ({ whitelist, blacklist }: {
    whitelist?: string[] | undefined;
    blacklist?: string[] | undefined;
}) => void;
export declare const throwError: ({ duplicates, subsets }: {
    duplicates: string[];
    subsets: string[];
}, listType: string) => void;
export declare const getRootKeysGroup: (list?: string[] | undefined) => RootKeysGroup[];
//# sourceMappingURL=index.d.ts.map